// models/menuItemModel.js

const pool = require("../config/db");

console.log("✅ menuItemModel.js IN");

const createMenuItemsTable = async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS public.menu_menuitem
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    url character varying(500) COLLATE pg_catalog."default",
    "order" integer NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    access_level character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'public'::character varying,
    analytics_data jsonb,
    archived_at timestamp with time zone,
    archived_by_id integer,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id integer,
    custom_css text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    custom_js text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    deleted_at timestamp with time zone,
    deleted_by_id integer,
    draft_version character varying(50) COLLATE pg_catalog."default",
    featured_image_url character varying(500) COLLATE pg_catalog."default",
    geo_location character varying(255) COLLATE pg_catalog."default",
    icon character varying(50) COLLATE pg_catalog."default",
    is_accessible boolean NOT NULL DEFAULT true,
    is_archived boolean NOT NULL DEFAULT false,
    is_cacheable boolean NOT NULL DEFAULT true,
    is_deleted boolean NOT NULL,
    is_draft boolean NOT NULL DEFAULT false,
    is_dropdown boolean NOT NULL,
    is_external boolean NOT NULL,
    is_featured boolean NOT NULL,
    is_featured_image boolean NOT NULL DEFAULT false,
    is_hidden boolean NOT NULL DEFAULT false,
    is_promoted boolean NOT NULL DEFAULT false,
    is_published boolean NOT NULL DEFAULT false,
    is_scheduled boolean NOT NULL DEFAULT false,
    is_searchable boolean NOT NULL DEFAULT false,
    is_trending boolean NOT NULL DEFAULT false,
    is_video boolean NOT NULL DEFAULT false,
    is_visible boolean NOT NULL DEFAULT false,
    parent_menu_id bigint,
    published_at timestamp with time zone,
    published_by_id integer,
    scheduled_at timestamp with time zone,
    scheduled_by_id integer,
    seo_description text COLLATE pg_catalog."default" NOT NULL,
    seo_title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    target character varying(10) COLLATE pg_catalog."default" NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tool_domain character varying(255) COLLATE pg_catalog."default",
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id integer,
    video_url character varying(500) COLLATE pg_catalog."default",
    CONSTRAINT menu_menuitem_pkey PRIMARY KEY (id),
    CONSTRAINT menu_menuitem_parent_menu_id_bacc565d_fk_menu_menuitem_id FOREIGN KEY (parent_menu_id)
        REFERENCES public.menu_menuitem (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE public.menu_menuitem
    OWNER to dailytoolbox_user;

-- Index: public.menu_menuitem_archived_by_id_2a9f52ae
CREATE INDEX IF NOT EXISTS menu_menuitem_archived_by_id_2a9f52ae
    ON public.menu_menuitem USING btree
    (archived_by_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: public.menu_menuitem_created_by_id_970b11d7
CREATE INDEX IF NOT EXISTS menu_menuitem_created_by_id_970b11d7
    ON public.menu_menuitem USING btree
    (created_by_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: public.menu_menuitem_deleted_by_id_ebc2938f
CREATE INDEX IF NOT EXISTS menu_menuitem_deleted_by_id_ebc2938f
    ON public.menu_menuitem USING btree
    (deleted_by_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: public.menu_menuitem_parent_menu_id_bacc565d
CREATE INDEX IF NOT EXISTS menu_menuitem_parent_menu_id_bacc565d
    ON public.menu_menuitem USING btree
    (parent_menu_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: public.menu_menuitem_published_by_id_4b3c5b8e
CREATE INDEX IF NOT EXISTS menu_menuitem_published_by_id_4b3c5b8e
    ON public.menu_menuitem USING btree
    (published_by_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: public.menu_menuitem_scheduled_by_id_30f8866d
CREATE INDEX IF NOT EXISTS menu_menuitem_scheduled_by_id_30f8866d
    ON public.menu_menuitem USING btree
    (scheduled_by_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: public.menu_menuitem_updated_by_id_39647017
CREATE INDEX IF NOT EXISTS menu_menuitem_updated_by_id_39647017
    ON public.menu_menuitem USING btree
    (updated_by_id ASC NULLS LAST)
    TABLESPACE pg_default;
  `
    );
    console.log("✅ MenuItem table ready");
  } catch (err) {
    console.error("❌ Error creating MenuItem table:", err.message);
    throw err;
  }
};
 
const getAllMenuItems = async () => {
  try {
    const result = await pool.query(
    'SELECT id, url, \"order\", is_active, access_level, analytics_data, archived_at, archived_by_id, created_at, created_by_id, custom_css, custom_js, deleted_at, deleted_by_id, draft_version, featured_image_url, geo_location, icon, is_accessible, is_archived, is_cacheable, is_deleted, is_draft, is_dropdown, is_external, is_featured, is_featured_image, is_hidden, is_promoted, is_published, is_scheduled, is_searchable, is_trending, is_video, is_visible, parent_menu_id, published_at, published_by_id, scheduled_at, scheduled_by_id, seo_description, seo_title, target, title, tool_domain, updated_at, updated_by_id, video_url FROM public.menu_menuitem  WHERE is_deleted = false AND is_visible = true AND is_published = true  ORDER BY \"order\" ASC NULLS LAST;'
  );
  return result.rows;
  } catch (error) {
    console.error("❌ QUERY ERROR:", error.message);
    throw error;
  }
  
  
};

// Add a new menu item
/**
 * Adds a new menu item to the menu_menuitem table.
 * @param {Object} data - Menu item data.
 * @returns {Promise<Object>} Inserted menu item.
 */
const addMenuItem = async (data) => {
  const {
    title,
    url,
    order = 0,
    is_active = true,
    access_level = 'public',
    icon = null,
    parent_menu_id = null,
    is_dropdown = false,
    is_external = false,
    is_visible = true,
    is_published = false,
    target = '_self',
    seo_title = '',
    seo_description = '',
    custom_css = '',
    custom_js = '',
    tool_domain = null,
    featured_image_url = null,
    geo_location = null,
    video_url = null,
    is_trending = false,
    is_featured = false,
    is_featured_image = false,
    is_searchable = false
  } = data;

  const result = await pool.query(
    `INSERT INTO public.menu_menuitem (
      title,
      url,
      "order",
      is_active,
      access_level,
      icon,
      parent_menu_id,
      is_dropdown,
      is_external,
      is_visible,
      is_published,
      target,
      seo_title,
      seo_description,
      custom_css,
      custom_js,
      tool_domain,
      featured_image_url,
      geo_location,
      video_url,
      is_trending,
      is_featured,
      is_featured_image,
      is_searchable
    ) VALUES (
      $1, $2, $3, $4, $5,
      $6, $7, $8, $9, $10,
      $11, $12, $13, $14, $15,
      $16, $17, $18, $19, $20,
      $21, $22, $23, $24
    )
    RETURNING *`,
    [
      title, url,
      order, is_active, access_level, icon, parent_menu_id, is_dropdown, is_external, is_visible,
      is_published, target, seo_title, seo_description, custom_css, custom_js, tool_domain, featured_image_url,
      geo_location, video_url, is_trending, is_featured, is_featured_image, is_searchable
    ]
  );

  return result.rows[0];
};

// Delete a menu item
const deleteMenuItem = async (id) => {
  const res = await pool.query('DELETE FROM menu_items WHERE id = $1', [id]);
  return res.rowCount;
};

module.exports = {
  createMenuItemsTable,
  getAllMenuItems,
  addMenuItem,
  deleteMenuItem
};